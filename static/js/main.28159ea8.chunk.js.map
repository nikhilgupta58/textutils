{"version":3,"sources":["components/Navbar/Navbar.js","components/Textform/Textform.js","components/Alert/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","mode","href","title","onClick","toggle","Textform","useState","text","setText","class","onChange","event","target","value","rows","newText","toUpperCase","alert","toLowerCase","navigator","clipboard","writeText","t","split","join","length","Alert","msg","App","setMode","setAlert","showAlert","setTimeout","document","body","style","backgroundColor","Navbar","propTypes","PropTypes","string","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.28159ea8.chunk.js","sourcesContent":["import React from \"react\";\nimport './Navbar.css'\n\nexport default function NavBar(props) {\n  return (\n    <>\n    <nav className={`nav-container nav-${props.mode}`}>\n        <div className=\"item1\">\n          <a href=\"/\" className={`item ${props.mode}`}>{props.title}</a>\n          <a href=\"/\" className={`item item2 ${props.mode}`}>Home</a>\n        </div>\n        <button onClick={props.toggle} className={`item item3 ${props.mode}`}>Enable {props.mode==='Light'?'Dark':'Light'}Mode</button>\n    </nav>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\n// import PropTypes from \"prop-types\";\nimport \"./Textform.css\";\n\nexport default function Textform(props) {\n  const [text, setText] = useState(\"\");\n  function handleClickEvent() {\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.alert(\"The text has been converted to Uppercase\");\n  }\n\n  function handleLoClickEvent() {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.alert(\"The text has been converted to Lowercase\");\n  }\n\n  function handleClearText() {\n    setText(\"\");\n    props.alert(\"The text has been cleared\");\n  }\n\n  function handleOnChangeEvent(event) {\n    setText(event.target.value);\n  }\n\n  function handleCopy() {\n    navigator.clipboard.writeText(text);\n    props.alert(\"The text has been copied\");\n  }\n\n  function handleRemove() {\n    let t = text.split(/[ ]+/);\n    setText(t.join(\" \"));\n    props.alert(\"Extra space has been removed from the text\");\n  }\n  return (\n    <>\n      <div className=\"text-container\">\n        <h1 class={`text-${props.mode}`}>{props.title}</h1>\n        <textarea\n          onChange={handleOnChangeEvent}\n          value={text}\n          className={`textform-textarea textarea-${props.mode}`}\n          rows=\"8\"\n        ></textarea>\n        <div className=\"op-container\">\n          <button onClick={handleClickEvent}>Convert to Uppercase</button>\n          <button onClick={handleLoClickEvent}>Convert to Lowercase</button>\n          <button onClick={handleClearText}>Clear Text</button>\n          <button onClick={handleCopy}>Copy Text</button>\n          <button onClick={handleRemove}>Remove Extra Space</button>\n        </div>\n        <h2 class={`text-${props.mode}`}>Your text summary</h2>\n        <p class={`text-${props.mode}`}> \n          {text.split(\" \").length} words and {text.length} characters\n        </p>\n        <p class={`text-${props.mode}`}>{text.split(\" \").length * 0.008} Minutes read</p>\n        <h2 class={`text-${props.mode}`}>Preview</h2>\n        <p class={`text-${props.mode}`}>{text}</p>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\nimport \"./Alert.css\"\n\nexport default function Alert(props){\n    return(\n        props.msg &&\n        <>\n            <div className=\"alert\">\n                <p>Success: {props.msg.text}</p>\n            </div>\n        </>\n    );\n}","import \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport PropTypes from \"prop-types\";\nimport Textform from \"./components/Textform/Textform\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"Light\");\n  const toggle = () => {\n    if (mode === \"Dark\") {\n      setMode(\"Light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\");\n    } else {\n      setMode(\"Dark\");\n      document.body.style.backgroundColor = \"darkblue\";\n      showAlert(\"Dark Mode has been enabled\");\n    }\n  };\n  const [alert, setAlert] = useState(null);\n  const showAlert = (text) => {\n    setAlert({\n      text:text\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1000)\n  };\n  return (\n    <>\n      <Navbar title=\"Textutils\" toggle={toggle} mode={mode} />\n      <Alert msg={alert} />\n      <div className=\"container\">\n        <Textform\n          title=\"Enter the text to analyze below\"\n          mode={mode}\n          alert={showAlert}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}