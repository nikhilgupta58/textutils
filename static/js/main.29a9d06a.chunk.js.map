{"version":3,"sources":["context/modeStatus.js","components/Navbar/Navbar.js","context/AlertContext.js","components/Textform/Textform.js","components/Alert/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["modeStatus","React","createContext","mode","NavBar","props","useContext","className","to","title","onClick","toggle","AlertContext","Textform","alert","useState","text","setText","mychild","children","mymode","otherProps","onChange","event","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","t","split","join","filter","e","length","Alert","App","setMode","setAlert","setTimeout","Provider","document","body","style","backgroundColor","path","element","Navbar","propTypes","PropTypes","string","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.29a9d06a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst modeStatus = React.createContext({ mode: \"Light\" });\nexport default modeStatus;\n","import React from \"react\";\nimport \"./Navbar.css\";\nimport { Link } from \"react-router-dom\";\nimport modeStatus from \"../../context/modeStatus\";\nimport { useContext } from \"react\";\n\n\nexport default function NavBar(props) {\n  let mode = useContext(modeStatus);\n\n  mode = mode.mode;\n  return (\n    <>\n      <nav className={`nav-container nav-${mode}`}>\n        <div className=\"item1\">\n          <Link to=\"/\" className={`item ${mode}`}>\n            {props.title}\n          </Link>\n          <Link to=\"/\" className={`item item2 ${mode}`}>\n            Home\n          </Link>\n        </div>\n        <button onClick={props.toggle} className={`item item3 ${mode}`}>\n          Enable {mode === \"Light\" ? \"Dark\" : \"Light\"}Mode\n        </button>\n      </nav>\n    </>\n  );\n}\n","import React from \"react\";\n\nconst AlertContext = React.createContext();\nexport default AlertContext;\n","import React, { useState, useContext } from \"react\";\n// import PropTypes from \"prop-types\";\nimport \"./Textform.css\";\nimport AlertContext from \"../../context/AlertContext\";\nimport modeStatus from \"../../context/modeStatus\";\n\nexport default function Textform(props) {\n  const alert = useContext(AlertContext);\n  let mode = useContext(modeStatus);\n  mode = mode.mode;\n  const [text, setText] = useState(\"\");\n  const {\n    title: mytitle,\n    children: mychild,\n    mode: mymode,\n    ...otherProps\n  } = props;\n  function handleClickEvent() {\n    let newText = text.toUpperCase();\n    setText(newText);\n    alert.showAlert(\"The text has been converted to Uppercase\");\n  }\n\n  function handleLoClickEvent() {\n    let newText = text.toLowerCase();\n    setText(newText);\n    alert.showAlert(\"The text has been converted to Lowercase\");\n  }\n\n  function handleClearText() {\n    setText(\"\");\n    alert.showAlert(\"The text has been cleared\");\n  }\n\n  function handleOnChangeEvent(event) {\n    setText(event.target.value);\n  }\n\n  function handleCopy() {\n    navigator.clipboard.writeText(text);\n    alert.showAlert(\"The text has been copied\");\n  }\n\n  function handleRemove() {\n    let t = text.split(/[ ]+/);\n    setText(t.join(\" \"));\n    alert.showAlert(\"Extra space has been removed from the text\");\n  }\n\n  return (\n    <>\n      <div {...otherProps} className=\"text-container\">\n        <h1 className={`text-${mymode}`}>{mychild}</h1>\n        <textarea\n          onChange={handleOnChangeEvent}\n          value={text}\n          className={`textform-textarea textarea-${mode}`}\n          rows=\"8\"\n        ></textarea>\n        <div className=\"op-container\">\n          <button onClick={handleClickEvent}>Convert to Uppercase</button>\n          <button onClick={handleLoClickEvent}>Convert to Lowercase</button>\n          <button onClick={handleClearText}>Clear Text</button>\n          <button onClick={handleCopy}>Copy Text</button>\n          <button onClick={handleRemove}>Remove Extra Space</button>\n        </div>\n        <h2 className={`text-${mode}`}>Your text summary</h2>\n        <p className={`text-${mode}`}>\n          {\n            text.split(\" \").filter((e) => {\n              return e.length !== 0;\n            }).length\n          }{\" \"}\n          words and {text.length} characters\n        </p>\n        <p className={`text-${mode}`}>\n          {text.split(\" \").length * 0.008} Minutes read\n        </p>\n        <h2 className={`text-${mode}`}>Preview</h2>\n        <p className={`text-${mode}`}>{text}</p>\n      </div>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport \"./Alert.css\";\nimport AlertContext from \"../../context/AlertContext\";\n\nexport default function Alert(props) {\n  const alert = useContext(AlertContext);\n  return (\n    alert.alert && (\n      <>\n        <div className=\"alert\">\n          <p>Success: {alert.alert.text}</p>\n        </div>\n      </>\n    )\n  );\n}\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport PropTypes from \"prop-types\";\nimport Textform from \"./components/Textform/Textform\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert/Alert\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport modeStatus from \"./context/modeStatus\";\nimport AlertContext from \"./context/AlertContext\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"Light\");\n  const toggle = () => {\n    if (mode === \"Dark\") {\n      setMode(\"Light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\");\n    } else {\n      setMode(\"Dark\");\n      document.body.style.backgroundColor = \"darkblue\";\n      showAlert(\"Dark Mode has been enabled\");\n    }\n  };\n  const [alert, setAlert] = useState(null);\n  const showAlert = (text) => {\n    setAlert({\n      text: text,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  };\n  return (\n    <Router>\n      <modeStatus.Provider value={{ mode: mode }}>\n        <Navbar title=\"Textutils\" toggle={toggle} />\n        <AlertContext.Provider value={{ alert, showAlert }}>\n          <Alert />{\" \"}\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <div className=\"container\">\n                  <Textform title=\"Enter the text to analyze below\">\n                    <h3>Enter the text below</h3>\n                  </Textform>\n                </div>\n              }\n            />\n          </Routes>\n        </AlertContext.Provider>\n      </modeStatus.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n\nNavbar.propTypes = {\n  title: PropTypes.string,\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}